Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {//difference is to avoid duplication
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        generator(0,result,new ArrayList<>(),candidates,target);
        return result;
    }
    void generator(int index,List<List<Integer>> list,List<Integer> tmp,int[] candidates,int target){
        if(index > candidates.length) return;
        else{
            for(int i = index;i < candidates.length;i++){
                if(i > index && candidates[i] == candidates[i-1]) continue;//avoid duplication
                tmp.add(candidates[i]);
                if(target == candidates[i]){
                    list.add(new ArrayList<>(tmp));
                    break;
                }else if(target > candidates[i]) generator(i+1,list,new ArrayList<>(tmp),candidates,target-candidates[i]);
                else break;
                tmp.remove(tmp.size()-1);
            }
        }
    }
}