A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.

Example:

Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
Note:
The order of output does not matter.
The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".


public class Solution {
    public List<String> readBinaryWatch(int num) {//就是两个二进制数，一个4位用来表示时，一个6位用来表示分
        List<String> list = new ArrayList<>();
        if(num > 10) return list;
        StringBuilder sb = new StringBuilder();
        generator(list,num,sb,0,0,0);
        return list;
    }
    void generator(List<String> list,int step,StringBuilder sb,int index,int hour,int minute){
        if(step == 0){
            sb.append(hour).append(":").append(minute<10?"0"+minute:minute);
            list.add(sb.toString());
            sb.delete(0,sb.length());
        }
        else{
            for(int i = index;i < 10&&step <= 10-i;i++){
                if(i < 4){
                    hour += 1 << i;
                    if(hour < 12) generator(list,step-1,sb,i+1,hour,minute);
                    hour -= 1 << i;
                }else{
                    minute += 1 << (i-4);
                    if(minute < 60) generator(list,step-1,sb,i+1,hour,minute);
                    minute -= 1 << (i-4);
                }
            }
        }
    }
}