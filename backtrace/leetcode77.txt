Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        boolean[] selected = new boolean[n];//to record which ones have been selected
        if(n < k) return result;
        generator(result,new ArrayList<>(),0,k,selected,n,1);
        return result;
    }
    void generator(List<List<Integer>> list,List<Integer> tmp,int step,int max,boolean[] selected,int range,int index){
        if(step == max) list.add(new ArrayList<>(tmp));
        else{
            for(int i = index;i <= range;i++){//It's not permutation so cannot allow duplication,to avoid duplication,latter added ones must be bigger than former
                if(!selected[i-1]){
                    if(tmp.size()>0&&i<tmp.get(tmp.size()-1)) continue;
                    selected[i-1] = true;
                    tmp.add(i);
                    generator(list,new ArrayList<>(tmp),step+1,max,selected,range,index+1);
                    tmp.remove(tmp.size()-1);
                    selected[i-1] = false;
                }
            }
        }
    }
}