Given a collection of integers that might contain duplicates, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        result.add(new ArrayList<>());
        int begin = 0;
        for(int i = 0; i < nums.length; i++){
	        if(i == 0 || nums[i] != nums[i - 1]) begin = 0;//make sure current integer has not been added
		    int size = result.size();
		    for(int j = begin; j < size; j++){//when added a new integer,it means for the elder ones,everyone increase by one
		    	List<Integer> cur = new ArrayList<Integer>(result.get(j));
			    cur.add(nums[i]);
		    	result.add(cur);
		    }
		    begin = size;
	    }
        // subSet(0,result,nums,new ArrayList<>());
        return result;
    }
    /*void subSet(int pos,List<List<Integer>> list,int[] nums,List<Integer> tmp){
        // subset means it does not need contain all elements, so the condition is <= rather than ==
        // and do not return after this statement
        if(pos <= nums.length) list.add(new ArrayList<>(tmp));
        
        for(int i = pos;i < nums.length;i++){
            while(i > pos&&nums[i] == nums[i-1]) continue; //avoid duplication
            tmp.add(nums[i]);
            subSet(i+1,list,nums,tmp);
            tmp.remove(tmp.size()-1);
        }
    }*/
}