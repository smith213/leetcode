Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(n>45||k>9) return result;
        generator(1,n,new ArrayList<>(),result,k);
        return result;
    }
    void generator(int index,int sum,List<Integer> tmp,List<List<Integer>> list,int k){
        if(index > 9) return;
        else{
            for(int i = index;i < 10;i++){
                tmp.add(i);
                if(k < tmp.size()) break;
                if(sum == i){
                    if(k == tmp.size()) list.add(new ArrayList<>(tmp));
                    break;
                }else if(sum > i) generator(i+1,sum-i,new ArrayList<>(tmp),list,k);
                else break;
                tmp.remove(tmp.size()-1);
            }
        }
    }
}