Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3




思路：F（n）:n个点能组成的不同BST的个数
      G（i,n）:以i为顶点含有n个节点的BST的个数
      显然G(i,n)=F(i-1)*F(n-i) (i-1为左子树上的节点个数，n-1为右子树上的节点个数）
      则F（n）= G(1,n)+G(2,n)+...+G(n,n) = F(0)*F(n-1)+F(1)*F(n-2)+...+F(n-1)*F(0)

public class Solution {
    public int numTrees(int n) {
        int[] G = new int[n+1];
        G[0] = G[1] = 1;
        
        for(int i = 2;i < n+1;i++){
            for(int j = 1;j <= i;j++){
                G[i] += G[j-1]*G[i-j];
            }
        }
        return G[n];
    }
}