Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL

/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {//关键在于要先练右子树，防止先连左出现找不到后续的问题
        if(root == null) return;
        if(root.left == null&&root.right == null) return;
        else if(root.left!=null&&root.right!=null){
            root.left.next = root.right;
            TreeLinkNode tmp = root.next;
            while(tmp!=null&&!hasChild(tmp)) tmp = tmp.next;
            if(tmp==null) root.right.next = null;
            else root.right.next = tmp.left!=null?tmp.left:tmp.right;
        }
        else{
            TreeLinkNode node = root.left!=null?root.left:root.right;
            TreeLinkNode tmp2 = root.next;
            while(tmp2!=null&&!hasChild(tmp2)) tmp2 = tmp2.next;
            if(tmp2==null) node.next = null;
            else node.next = tmp2.left!=null?tmp2.left:tmp2.right;
        }
        connect(root.right);
        connect(root.left);
    }
    boolean hasChild(TreeLinkNode node){
        return node.left!=null||node.right!=null;
    }
}