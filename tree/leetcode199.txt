Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {//It's similar to the problem that output every hierachy of tree,in this one,we just need the last one in every hierachy
        List<Integer> result = new ArrayList<>();//save result
        setSideView(result,1,root);
        return result;
    }
    void setSideView(List<Integer> result,int level,TreeNode node){
        if(node == null) return;
        if(result.size()<level){
            result.add(node.val);
        }else{
            result.set(level-1,node.val);
        }
        setSideView(result,level+1,node.left);
        setSideView(result,level+1,node.right);
    }
}