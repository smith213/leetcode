Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        traversal(list,1,root);
        Collections.reverse(list);
        return list;
    }
    public void traversal(List<List<Integer>> list,int level,TreeNode node){
        if(node == null) return;
        if(list.size()<level){
            List<Integer> addOne = new ArrayList<Integer>();
            addOne.add(node.val);
            list.add(addOne);
        }
        else list.get(level-1).add(node.val);
        traversal(list,level+1,node.left);
        traversal(list,level+1,node.right);
    }
}