One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true

Example 2:
"1,#"
Return false

Example 3:
"9,#,#,1"
Return false

public class Solution {
    public boolean isValidSerialization(String preorder) {
        int n = preorder.length();
        if(n < 1) return true;
        Stack<Character> tree = new Stack();
        int i = 0;
        if(preorder.charAt(i)!='#') tree.push(preorder.charAt(i++));
        while(!tree.isEmpty()&&i<n){//输入中可能含有逗号和不止一位的数字
            if(preorder.charAt(i) == ',') i++;
            else{
                if(preorder.charAt(i) != '#'){
                    tree.push(preorder.charAt(i));
                }else{
                    i+=2;
                    tree.pop();
                    if(i >= n) return false;
                    while(i < n && !tree.isEmpty()&&preorder.charAt(i) == '#'){
                        i+=2;
                        tree.pop();
                    }
                    if(i >= n-1 /*|| tree.isEmpty()*/) break;
                    if(preorder.charAt(i) == '#' ||preorder.charAt(i) == ',') return false;
                    tree.push(preorder.charAt(i));
                }
                i++;
                while(i < n&&preorder.charAt(i)!=',') i++;
            }
        }
        return tree.isEmpty()&&(i == n-1&&preorder.charAt(i)=='#');
    }
}